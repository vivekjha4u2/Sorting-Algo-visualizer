{"version":3,"sources":["sortingAlgorithms/MergeSort.js","sortingAlgorithms/QuickSort.js","SortingVisualizer/Description.js","SortingVisualizer/SortingVisualizer.jsx","sortingAlgorithms/SelectionSort.js","sortingAlgorithms/BubbleSort.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","QuickSortHelper","low","high","pi","pivot","temp","partition","Description","props","state","this","heading","desc","wt","avgt","bt","ws","React","Component","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","SortingVisualizer","changeArraySize","event","setState","arraySizeValue","target","value","resetArray","document","getElementsByClassName","style","width","isAlgoRunning","algo","merge","bubble","selection","quick","heap","min","max","random","speed","className","Navbar","bg","variant","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","NavDropdown","title","Item","onClick","setAnimSpeed","htmlFor","name","onChange","disabled","map","idx","key","backgroundColor","height","mergeSort","bubbleSort","selectionSort","quickSort","s","console","log","al","disable","minIndex","selectionSortHelper","getSelectionSortAnimations","arrayBars","barJIndex","barMinIndex","barJStyle","barMinStyle","setTimeout","barOneIdx","barTwoIdx","barOneHt","barTwoHt","barOneStyle","barTwoStyle","enable","bubbleSortHelper","getBubbleSortAnimations","isSwap","color","newHeight","pivotBarIdx","lowOrHigh","pivotBarStyle","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.84a9a91c.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n","export function getQuickSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    QuickSortHelper(array, 0, array.length - 1, animations);\r\n    return animations;\r\n}\r\nfunction partition(array, low, high, animations) {\r\n    let pivot = array[low];\r\n    let i = low - 1;\r\n    let j = high + 1;\r\n\r\n    while (true) {\r\n        // Find leftmost element greater \r\n        // than or equal to pivot \r\n        do {\r\n            i++;\r\n            animations.push([i, low, 0]);\r\n            animations.push([i, low, 0]);\r\n        } while (array[i] < pivot);\r\n\r\n        // Find rightmost element smaller \r\n        // than or equal to pivot \r\n        do {\r\n            j--;\r\n            animations.push([j, low, 1]);\r\n            animations.push([j, low, 1]);\r\n        } while (array[j] > pivot);\r\n\r\n        // If two pointers met. \r\n        if (i >= j) {\r\n            animations.push([j]);\r\n            animations.push([j]);\r\n            return j;\r\n        }\r\n        animations.push([i, j, array[i], array[j]]);\r\n        let temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n        //swap(arr[i], arr[j]); \r\n\r\n\r\n        animations.push([i, j, array[i], array[j]]);\r\n    }\r\n}\r\n\r\nfunction QuickSortHelper(array, low, high, animations) {\r\n    if (low < high) {\r\n        /* pi is partitioning index,  \r\n        arr[p] is now at right place */\r\n        let pi = partition(array, low, high, animations);\r\n\r\n        // Separately sort elements before \r\n        // partition and after partition \r\n        QuickSortHelper(array, low, pi, animations);\r\n        QuickSortHelper(array, pi + 1, high, animations);\r\n        // console.log(array);\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class Description extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            // heading: this.props.heading,\r\n            // desc: this.props.desc,\r\n            // wt: \"\",\r\n            // avgt: \"\",\r\n            //bt:\"\",\r\n            // ws: \"\",\r\n\r\n        };\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <h2>Algorithm: {this.props.heading}</h2>\r\n                    <p>Description: {this.props.desc}</p>\r\n\r\n                </div>\r\n                <div>\r\n                    <h5>Worst time complexity: {this.props.wt}</h5>\r\n                    <h5>Average time complexity: {this.props.avgt}</h5>\r\n\r\n                    <h5>Best time complexity: {this.props.bt}</h5>\r\n                    <h5>Worst space complexity: {this.props.ws}</h5>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { getMergeSortAnimations } from '../sortingAlgorithms/MergeSort.js'\r\nimport { getBubbleSortAnimations } from '../sortingAlgorithms/BubbleSort'\r\nimport './SortingVisualizer.css';\r\nimport { getSelectionSortAnimations } from '../sortingAlgorithms/SelectionSort.js';\r\nimport { getQuickSortAnimations } from '../sortingAlgorithms/QuickSort.js';\r\nimport { Nav, Navbar, NavDropdown } from 'react-bootstrap'\r\nimport Description from './Description.js'\r\n\r\nvar ANIMATION_SPEED_MS = 50;\r\nvar NUMBER_OF_ARRAY_BARS = 50;\r\n//230\r\nconst PRIMARY_COLOR = 'aqua';\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      array: [],\r\n      isAlgoRunning: false,\r\n      arraySizeValue: 'large',\r\n      algo: {\r\n        merge: true,\r\n        bubble: true,\r\n        selection: true,\r\n        quick: true,\r\n        heap: true\r\n      },\r\n\r\n      // NUMBER_OF_ARRAY_BARS: 50,\r\n\r\n      //to show description ..onclick of an algo we change State vars to specific algo.\r\n      heading: \"\",\r\n      desc: \"\",\r\n      wt: \"\",\r\n      avgt: \"\",\r\n      bt: \"\",\r\n      ws: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n    this.setState({ isAlgoRunning: true });\r\n  }\r\n\r\n  changeArraySize = (event) => {\r\n    //to make this responsive for mobile devices-> divide screen width by width of \r\n    //array-bar to get the NUMBER_OF_ARRAY_BARS\r\n    this.setState({ arraySizeValue: event.target.value });\r\n    // console.log(\"event.target.value\", event.target.value)\r\n    //trying to get the width of arraybar\r\n\r\n    if (event.target.value === 'small') {\r\n      NUMBER_OF_ARRAY_BARS = 15\r\n      this.resetArray();\r\n      for (let i = 0; i < this.state.array.length; i++) {\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        arrayBars[i].style.width = '70px'\r\n      }\r\n      // console.log(this.state.array.length)\r\n\r\n    }\r\n    else if (event.target.value === 'medium') {\r\n      // console.log(this.state.arraySizeValue)   this shows wrong ..dont know why\r\n      NUMBER_OF_ARRAY_BARS = 26\r\n      this.resetArray();\r\n      for (let i = 0; i < this.state.array.length; i++) {\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        arrayBars[i].style.width = '40px'\r\n      }\r\n    }\r\n    else if (event.target.value === 'large') {\r\n      // this.setState({ NUMBER_OF_ARRAY_BARS: 50 });\r\n      // console.log(this.state.NUMBER_OF_ARRAY_BARS)\r\n      NUMBER_OF_ARRAY_BARS = 50\r\n      this.resetArray();\r\n      for (let i = 0; i < this.state.array.length; i++) {\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        arrayBars[i].style.width = '20px'\r\n      }\r\n    }\r\n    // else if (event.target.value === 'xl') {\r\n    //   NUMBER_OF_ARRAY_BARS = 270\r\n    //   this.resetArray();\r\n    //   for (let i = 0; i < this.state.array.length; i++) {\r\n    //     const arrayBars = document.getElementsByClassName('array-bar');\r\n    //     arrayBars[i].style.width = '2px'\r\n    //   }\r\n    // }\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(5, 500));\r\n    }\r\n    this.setState({ array });\r\n  }\r\n  setAnimSpeed(speed) {\r\n    if (speed === 'slow')\r\n      ANIMATION_SPEED_MS = 400;\r\n    else if (speed === 'normal')\r\n      ANIMATION_SPEED_MS = 50;\r\n    else\r\n      ANIMATION_SPEED_MS = 10;\r\n  }\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n    return (\r\n      <div className=\"container-fluid \">\r\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\r\n          <Navbar.Brand href=\"#home\">Sorting Algorithms Visualizer</Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n          <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav className=\"mr-auto\">\r\n              <Nav.Link href=\"#home\">Home</Nav.Link>\r\n              <Nav.Link href=\"#link\">Link</Nav.Link>\r\n              <NavDropdown title=\"Animation Speed\" id=\"basic-nav-dropdown\">\r\n                <NavDropdown.Item value=\"slow\" onClick={() => { this.setAnimSpeed('slow') }} href=\"#speed:Slow\">Slow</NavDropdown.Item>\r\n                <NavDropdown.Item value=\"normal\" onClick={() => { this.setAnimSpeed('normal') }} href=\"#speed:Normal\">Normal</NavDropdown.Item>\r\n                <NavDropdown.Item value=\"fast\" onClick={() => { this.setAnimSpeed('fast') }} href=\"#speed:Fast\">Fast</NavDropdown.Item>\r\n              </NavDropdown>\r\n\r\n              <label htmlFor=\"arraySize\">arraySize:</label>\r\n\r\n              <select name=\"arraySize\" id=\"arraySize\" onChange={this.changeArraySize} value={this.state.arraySizeValue}>\r\n                <option disabled value=\"select\">Select Size</option>\r\n                <option value=\"small\">small array</option>\r\n                <option value=\"medium\">medium array</option>\r\n                <option value=\"large\">large array</option>\r\n                <option value=\"xl\">xl array</option>\r\n              </select>\r\n            </Nav>\r\n\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n        <div className=\"array-container container\">\r\n          {array.map((value, idx) => (\r\n\r\n            // <div className=\"array-bar-container\" key={idx}>\r\n\r\n            <div className=\"array-bar\" key={idx}\r\n              style={{\r\n                backgroundColor: PRIMARY_COLOR,\r\n                height: `${value}px`\r\n              }}\r\n            ></div>\r\n\r\n            // </div>\r\n          ))}\r\n\r\n          <div className=\"container row\">\r\n            <button className=\"btn-info col-md-2\" onClick={() => { this.resetArray() }}>Generate Array</button>\r\n            <button className=\"btn-primary col-md-2\" disabled={!this.state.algo.merge} onClick={() => this.mergeSort()}>Merge Sort</button>\r\n            <button className=\"btn-primary col-md-2\" disabled={!this.state.algo.bubble} onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n            <button className=\"btn-primary col-md-2\" disabled={!this.state.algo.selection} onClick={() => this.selectionSort()}>Selection Sort</button>\r\n            <button className=\"btn-primary col-md-2\" disabled={!this.state.algo.quick} onClick={() => this.quickSort()}>Quick Sort</button>\r\n            <button className=\"btn-primary col-md-2\" disabled={!this.state.algo.heap} onClick={() => this.selectionSort()}>Heap Sort</button>\r\n          </div>\r\n        </div>\r\n\r\n        <Description heading={this.state.heading}\r\n          desc={this.state.desc}\r\n          wt={this.state.wt} avgt={this.state.avgt} bt={this.state.bt} ws={this.state.ws}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  disable(s) {\r\n    console.log(s);\r\n    const al = this.state.algo;\r\n    console.log(al)\r\n    console.log(al[\"bubble\"])\r\n    if (s == \"bubble\") {\r\n      al[\"merge\"] = false;\r\n      al[\"selection\"] = false;\r\n      al[\"heap\"] = false;\r\n      al[\"quick\"] = false\r\n\r\n    }\r\n    else if (s == \"selection\") {\r\n      al[\"merge\"] = false;\r\n      al[\"bubble\"] = false;\r\n      al[\"heap\"] = false;\r\n      al[\"quick\"] = false\r\n    }\r\n    else if (s == \"quick\") {\r\n      al[\"merge\"] = false;\r\n      al[\"bubble\"] = false;\r\n      al[\"heap\"] = false;\r\n      al[\"selection\"] = false\r\n    }\r\n    else if (s == \"merge\") {\r\n      al[\"quick\"] = false;\r\n      al[\"bubble\"] = false;\r\n      al[\"heap\"] = false;\r\n      al[\"selection\"] = false\r\n\r\n    }\r\n    console.log(al)\r\n    // this.setState({ algo: al })\r\n\r\n  }\r\n\r\n  enable() {\r\n    const al = {\r\n      merge: true,\r\n      bubble: true,\r\n      selection: true,\r\n      quick: true,\r\n      heap: true\r\n    }\r\n    this.setState({ algo: al })\r\n  }\r\n\r\n\r\n\r\n  selectionSort() {\r\n    // this.setState({ isAlgoRunning: true })\r\n    /* this.setState({\r\n       heading: \"SELECTION SORT\",\r\n       desc: `The selection sort algorithm sorts an array by repeatedly finding\r\n       the minimum element (considering ascending order) from unsorted part and \r\n        putting it at the beginning. The algorithm maintains two subarrays in \r\n         a given array. \r\n \r\n      1) The subarray which is already sorted. \r\n      2) Remaining subarray which is unsorted. \r\n \r\n      In every iteration of selection sort, the minimum element \r\n       (considering ascending order) from the unsorted subarray is  \r\n       picked and moved to the sorted subarray.`,\r\n \r\n       wt: \"O(N^2)\", avgt: \"O(N^2)\", bt: \"O(N^2)\", ws: \"O(1)\"\r\n     });\r\n */\r\n    this.disable(\"selection\")\r\n    const animations = getSelectionSortAnimations(this.state.array);\r\n    let i;\r\n    for (i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n      if (animations[i].length === 2) {\r\n        const [barJIndex, barMinIndex] = animations[i];\r\n        const barJStyle = arrayBars[barJIndex].style;\r\n        const barMinStyle = arrayBars[barMinIndex].style;\r\n        if (i % 2 === 0) {\r\n          setTimeout(() => {\r\n            barJStyle.backgroundColor = 'yellow';\r\n            barMinStyle.backgroundColor = 'black';\r\n          }, i * ANIMATION_SPEED_MS)\r\n        }\r\n        else {\r\n          setTimeout(() => {\r\n            barJStyle.backgroundColor = PRIMARY_COLOR;\r\n            barMinStyle.backgroundColor = PRIMARY_COLOR;\r\n          }, i * ANIMATION_SPEED_MS)\r\n        }\r\n      }\r\n      else {\r\n        const [barOneIdx, barTwoIdx, barOneHt, barTwoHt] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n\r\n        if (i % 2 === 0) {\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n            barTwoStyle.backgroundColor = SECONDARY_COLOR;\r\n\r\n            console.log(\"barOneStyle.height before->\" + barOneStyle.height + \"### \" + \"barTwoStyle.height before->\" + barTwoStyle.height);\r\n            barOneStyle.height = `${barTwoHt}px`;\r\n            barTwoStyle.height = `${barOneHt}px`;\r\n            // console.log(\"barOneStyle.height after->\" + barOneStyle.height + \"### \" + \"barTwoStyle.height after->\" + barTwoStyle.height);\r\n\r\n          }, i * ANIMATION_SPEED_MS)\r\n        }\r\n        else {\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n            barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n          }, i * ANIMATION_SPEED_MS)\r\n        }\r\n      }\r\n    }\r\n    setTimeout(() => {\r\n      this.enable()\r\n    }, i * ANIMATION_SPEED_MS);\r\n\r\n  }\r\n\r\n  bubbleSort() {\r\n    // this.setState({\r\n    //   heading: \"BUBBLE SORT\",\r\n    //   desc: `Bubble sort, sometimes referred to as sinking sort, is a simple\r\n    //    sorting algorithm that repeatedly steps through the list, compares\r\n    //     adjacent elements and swaps them if they are in the wrong order. \r\n    //     The pass through the list is repeated until the list is sorted.\r\n    //      The algorithm, which is a comparison sort, is named for the way \r\n    //      smaller or larger elements \"bubble\" to the top of the list`,\r\n\r\n    //   wt: \"O(N^2)\", avgt: \"O(N^2)\", bt: \"O(N)\", ws: \"O(1)\"\r\n    // });\r\n    this.disable(\"bubble\")\r\n    const animations = getBubbleSortAnimations(this.state.array);\r\n    let i;\r\n    for (i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      // console.log(i + \" \" + animations.length);\r\n      const [barOneIdx, barTwoIdx, barOneHt, barTwoHt, isSwap] = animations[i];\r\n      const barOneStyle = arrayBars[barOneIdx].style;\r\n      const barTwoStyle = arrayBars[barTwoIdx].style;\r\n\r\n      //last sorted elem color to green\r\n      // i === this.state.array.length - decrement 1\r\n      // 50 49 \r\n\r\n      if (i % 2 !== 0) {\r\n        setTimeout(() => {\r\n          // barTwoStyle.width = `20px`;\r\n          // barOneStyle.transform = 'translate(-5px, 0px)';\r\n          // barTwoStyle.transform = 'translate(5px, 0px)';\r\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n          barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n        }, i * ANIMATION_SPEED_MS)\r\n      }\r\n      else if (isSwap === 0) {\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = 'yellow';\r\n          barTwoStyle.backgroundColor = 'yellow';\r\n        }, i * ANIMATION_SPEED_MS)\r\n      }\r\n      else if (isSwap === 1) {\r\n        setTimeout(() => {\r\n          // barOneStyle.transform = 'translate(5px, 0px)';\r\n          // barTwoStyle.transform = 'translate(-5px, 0px)';\r\n          // barTwoStyle.width = `15px`;\r\n          barOneStyle.height = `${barTwoHt}px`;\r\n          barTwoStyle.height = `${barOneHt}px`;\r\n          barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n          barTwoStyle.backgroundColor = SECONDARY_COLOR;\r\n\r\n        }, i * ANIMATION_SPEED_MS)\r\n      }\r\n\r\n\r\n      // setTimeout(() => {\r\n      //   barOneStyle.backgroundColor = 'aqua';\r\n      //   barTwoStyle.backgroundColor = 'aqua';\r\n      //   arrayBars[this.state.array.length - i - 1].style.backgroundColor = \"red\"\r\n\r\n      //   //trying to change color of last(sorted) elements to red\r\n      //   // if (i < this.state.array.length) {\r\n      //   //   // console.log(this.state.array.length - i - 1)\r\n      //   //   // arrayBars[this.state.array.length - i - 1].style.backgroundColor = \"red\"\r\n      //   // }\r\n\r\n      // }, i * ANIMATION_SPEED_MS)\r\n    }\r\n    setTimeout(() => {\r\n      this.enable()\r\n    }, i * ANIMATION_SPEED_MS);\r\n\r\n  }\r\n\r\n  mergeSort() {\r\n    // this.setState({\r\n    //   heading: \"MERGE SORT\",\r\n    //   desc: `In computer science, merge sort (also commonly spelled mergesort)\r\n    //    is an efficient, general-purpose, comparison-based sorting algorithm.\r\n    //     Most implementations produce a stable sort, which means that the order\r\n    //      of equal elements is the same in the input and output. Merge sort is\r\n    //       a divide and conquer algorithm that was invented by John von\r\n    //        Neumann in 1945.`,\r\n\r\n    //   wt: \"O(N(logN))\", avgt: \"O(N(logN))\", bt: \"O(N(logN))\", ws: \"O(N)\"\r\n    // });\r\n\r\n    this.disable(\"merge\");\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    // console.log(animations);\r\n    let k = 0;\r\n    for (let i = 0; i < animations.length; i++) {\r\n      k++;\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n\r\n    }\r\n    setTimeout(() => {\r\n      this.enable()\r\n    }, k * ANIMATION_SPEED_MS);\r\n\r\n  }\r\n\r\n  quickSort() {\r\n    // this.setState({\r\n    //   heading: \"QUICK SORT\",\r\n    //   desc: `Quicksort (sometimes called partition-exchange sort) is an\r\n    //    efficient sorting algorithm. Developed by British computer scientist\r\n    //     Tony Hoare in 1959[1] and published in 1961,[2] it is still a commonly\r\n    //      used algorithm for sorting. When implemented well, it can be about two\r\n    //       or three times faster than its main competitors, merge sort and\r\n    //        heapsort.[3][contradictory]\r\n\r\n    //   Quicksort is a divide-and-conquer algorithm. It works by selecting a 'pivot'\r\n    //    element from the array and partitioning the other elements into two \r\n    //    sub-arrays, according to whether they are less than or greater than\r\n    //     the pivot. The sub-arrays are then sorted recursively. This can be\r\n    //      done in-place, requiring small additional amounts of memory to perform\r\n    //       the sorting.`,\r\n\r\n    //   wt: \"O(N^2)\", avgt: \"O(N(logN))\", bt: \"O(N(logN))\", ws: \"O(logN)\"\r\n    // });\r\n    this.disable(\"quick\")\r\n    const animations = getQuickSortAnimations(this.state.array);\r\n    console.log(animations);\r\n    let i;\r\n    for (i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n      if (animations[i].length === 1) {\r\n\r\n        const [barOneIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        if (i % 2 === 0) {\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = 'purple';\r\n          }, i * ANIMATION_SPEED_MS)\r\n        } else {\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n          }, i * ANIMATION_SPEED_MS)\r\n        }\r\n      }\r\n\r\n      //partition k liye (low or i) ko aage badhana aur (high or j) ko peeche lana\r\n      //i aur j ka color change k liye 4 if else... \r\n      //lowOrHigh is 0 -> i ka color change k liye... AND viceversa\r\n      else if (animations[i].length === 3) {\r\n        const [barOneIdx, pivotBarIdx, lowOrHigh] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const pivotBarStyle = arrayBars[pivotBarIdx].style;\r\n        if (lowOrHigh === 0 && i % 2 === 0) {\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n            pivotBarStyle.backgroundColor = 'black';\r\n          }, i * ANIMATION_SPEED_MS)\r\n        }\r\n        else if (lowOrHigh === 0 && i % 2 !== 0) {\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n            pivotBarStyle.backgroundColor = PRIMARY_COLOR;\r\n          }, i * ANIMATION_SPEED_MS)\r\n        }\r\n        else if (lowOrHigh === 1 && i % 2 === 0) {\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = 'green';\r\n            pivotBarStyle.backgroundColor = 'black';\r\n          }, i * ANIMATION_SPEED_MS)\r\n        }\r\n        else if (lowOrHigh === 1 && i % 2 !== 0) {\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n            pivotBarStyle.backgroundColor = PRIMARY_COLOR;\r\n          }, i * ANIMATION_SPEED_MS)\r\n        }\r\n      }\r\n      //swap k liye 4 element push huye h animations me\r\n      //animations[i].length === 4\r\n      else {\r\n        const [barOneIdx, barTwoIdx, barOneHt, barTwoHt] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n\r\n        if (i % 2 === 0) {\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = 'yellow';\r\n            barTwoStyle.backgroundColor = 'yellow';\r\n            barOneStyle.height = `${barTwoHt}px`;\r\n            barTwoStyle.height = `${barOneHt}px`;\r\n          }, i * ANIMATION_SPEED_MS)\r\n        }\r\n        else {\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n            barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n          }, i * ANIMATION_SPEED_MS)\r\n        }\r\n\r\n      }\r\n\r\n\r\n    }\r\n    setTimeout(() => {\r\n      this.enable()\r\n    }, i * ANIMATION_SPEED_MS);\r\n\r\n  }\r\n}\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//   // NOTE: This method will only work if your sorting algorithms actually return\r\n//   // the sorted arrays; if they return the animations (as they currently do), then\r\n//   // this method will be broken.\r\n//   testSortingAlgorithms() {\r\n//     for (let i = 0; i < 100; i++) {\r\n//       const array = [];\r\n//       const length = randomIntFromInterval(1, 1000);\r\n//       for (let i = 0; i < length; i++) {\r\n//         array.push(randomIntFromInterval(-1000, 1000));\r\n//       }\r\n//       const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n//       const mergeSortedArray = getMergeSortAnimations(array.slice());\r\n//       console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\r\n//     }\r\n//   }\r\n\r\n\r\n\r\n// // From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\n// function randomIntFromInterval(min, max) {\r\n//   // min and max included\r\n//   return Math.floor(Math.random() * (max - min + 1) + min);\r\n// }\r\n\r\n// function arraysAreEqual(arrayOne, arrayTwo) {\r\n//   if (arrayOne.length !== arrayTwo.length) return false;\r\n//   for (let i = 0; i < arrayOne.length; i++) {\r\n//     if (arrayOne[i] !== arrayTwo[i]) {\r\n//       return false;\r\n//     }\r\n//   }\r\n//   return true;\r\n// }\r\n","export function getSelectionSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    // console.log(array);\r\n    selectionSortHelper(array, animations);\r\n    return animations;\r\n}\r\n\r\nfunction selectionSortHelper(array, animations) {\r\n\r\n    for (let i = 0; i < array.length - 1; i++) {\r\n        let minIndex = i;\r\n\r\n        for (let j = i + 1; j < array.length; j++) {\r\n            if (array[j] < array[minIndex]) minIndex = j;\r\n            animations.push([j, minIndex]);\r\n            animations.push([j, minIndex]);\r\n        }\r\n        animations.push([minIndex, i, array[minIndex], array[i]]);\r\n        let temp = array[minIndex];\r\n        array[minIndex] = array[i];\r\n        array[i] = temp;\r\n\r\n        animations.push([minIndex, i, array[minIndex], array[i]]);\r\n\r\n\r\n\r\n    }\r\n    // console.log(array);\r\n}\r\n","export function getBubbleSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    bubbleSortHelper(array, animations);\r\n    return animations;\r\n}\r\n\r\nfunction bubbleSortHelper(array, animations) {\r\n    for (let i = 0; i < array.length; i++) {\r\n        for (let j = 0; j < array.length - i - 1; j++) {\r\n            if (array[j] > array[j + 1]) {\r\n                let temp = array[j];\r\n                array[j] = array[j + 1];\r\n                array[j + 1] = temp;\r\n\r\n                //when swapping is done we push 1 else 0\r\n                animations.push([j, j + 1, array[j + 1], array[j], 1]);\r\n                animations.push([j, j + 1, array[j + 1], array[j], 1]);\r\n            } else {\r\n                animations.push([j, j + 1, array[j + 1], array[j], 0]);\r\n                animations.push([j, j + 1, array[j + 1], array[j], 0]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}